#!/usr/bin/env python
# encoding: utf-8

# simple script to generate an html file which indexes
# all of my offline documentation folders

import os
import re
import codecs

from ConfigParser import SafeConfigParser

from os.path import abspath, join, expanduser
from jinja2 import FileSystemLoader, Environment


CONFIG_PATH = '/home/mooja/.config/docindex/config.ini'
DOCS_DIR = '/home/mooja/docs/'
INDEX_FILE = '/home/mooja/docs/index.html'
TEMPLATE_PATH = "/home/mooja/.docindex/template.html"


def find_index_files(index_files, dirname, names):
    if os.path.normpath(abspath(os.path.dirname(dirname))) == os.path.normpath(DOCS_DIR):
        for name in names:
            abs_name = abspath(join(dirname, name))
            m = re.match(r'^index.html$', name)
            if m and abs_name != INDEX_FILE:
                index_files.append(abs_name.decode(encoding='utf-8'))


if __name__ == '__main__':
    config = SafeConfigParser()
    config.read(CONFIG_PATH)

    index_files = [config.get(section, 'file')
        for section in config.sections()]
    titles = [config.get(section, 'title')
        for section in config.sections()]

    # expand ~
    index_files = map(expanduser, index_files)

    # scan the ~/docs/ directory for index.html files not in database
    new_indexfiles = []
    os.path.walk(DOCS_DIR, find_index_files, new_indexfiles)
    new_indexfiles = filter(lambda x: x not in index_files, new_indexfiles)
    for ifile in new_indexfiles:
        title = raw_input("Found new file: {} \n"
                          "Enter a title [blank to ignore]: ".format(ifile))
        title = title.strip()
        if title:
            config.add_section(title)
            config.set(title, 'file', ifile)
            config.set(title, 'title', title)
            config.write(open(CONFIG_PATH, 'w'))
            index_files.append(ifile)
            titles.append(title)

    template_env = Environment(loader=FileSystemLoader('/home/mooja/.config/docindex'))
    t = template_env.get_template('template.html')
    output = t.render(indexes=zip(titles, index_files))
    with codecs.open(INDEX_FILE, 'w', encoding='utf-8') as f:
        f.write(output)
